name: Snowflake Model Auto-Sync + Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  snowflake-sync:
    runs-on: ubuntu-latest

    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Snowflake CLI (v3) and jq
        run: |
          python3 -m pip install --upgrade pip
          pip install --user --upgrade "snowflake-cli>=3.10.0"
          sudo apt-get install -y jq
          echo 'export PATH=$HOME/.local/bin:$PATH' >> $GITHUB_ENV
          source $GITHUB_ENV
          snow --version

      - name: Configure Snowflake connection
        run: |
          mkdir -p ~/.snowflake
          {
            echo "[connections.default]"
            echo "account = \"${SNOWFLAKE_ACCOUNT}\""
            echo "user = \"${SNOWFLAKE_USER}\""
            echo "password = \"${SNOWFLAKE_PASSWORD}\""
            echo "role = \"${SNOWFLAKE_ROLE}\""
            echo "warehouse = \"${SNOWFLAKE_WAREHOUSE}\""
            echo "database = \"${SNOWFLAKE_DATABASE}\""
            echo "schema = \"${SNOWFLAKE_SCHEMA}\""
          } > ~/.snowflake/config.toml
          chmod 600 ~/.snowflake/config.toml
          echo "‚úÖ Snowflake connection config created."

      - name: Verify Snowflake connection
        run: |
          snow connection list
          snow sql -q "SELECT CURRENT_USER(), CURRENT_ROLE(), CURRENT_DATABASE(), CURRENT_SCHEMA();" --format CSV

      - name: Execute Snowflake notebooks directly
        run: |
          echo "üöÄ Running Snowflake ML notebooks directly..."
          notebooks=("DATA_INGESTION" "FEATURE_ENGINEERING" "MODEL_TRAINING" "MODEL_EVALUATION")
          for nb in "${notebooks[@]}"; do
            echo "üìò Executing notebook: $nb ..."
            snow notebook execute --name "$nb" --connection default --wait
            if [ $? -ne 0 ]; then
              echo "‚ùå Notebook $nb failed!"
              exit 1
            fi
            echo "‚úÖ $nb executed successfully."
          done

      - name: Download latest ONNX model from MODELS stage
        run: |
          echo "üì• Fetching latest ONNX model..."
          mkdir -p staged_models
          json_out=$(snow sql -q "
            USE DATABASE ${SNOWFLAKE_DATABASE};
            USE SCHEMA ${SNOWFLAKE_SCHEMA};
            LIST @${SNOWFLAKE_DATABASE}.${SNOWFLAKE_SCHEMA}.MODELS PATTERN='.*.onnx';
          " --format json)
          latest_file=$(echo "$json_out" | jq -r '
            flatten | map(select(.name? != null)) |
            sort_by((.last_modified | sub(", "; " ") | strptime("%a %d %b %Y %H:%M:%S GMT") | mktime)) |
            reverse | .[0].name')
          echo "‚úÖ Latest file: $latest_file"
          snow sql -q "GET @${SNOWFLAKE_DATABASE}.${SNOWFLAKE_SCHEMA}.MODELS/$latest_file file://staged_models/"
          echo "‚úÖ Model downloaded to staged_models/"

      - name: Commit and create release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add staged_models/
          git commit -m "Sync latest ONNX model from Snowflake MODELS stage" || echo "No new changes"
          git push
          RELEASE_TAG="model-$(date +'%Y%m%d-%H%M%S')"
          LATEST_MODEL_FILE=$(basename "$latest_file")
          gh release create "$RELEASE_TAG" "staged_models/$LATEST_MODEL_FILE" \
            --title "Model Release ($RELEASE_TAG)" \
            --notes "Latest ONNX model auto-synced from Snowflake MODELS stage."
